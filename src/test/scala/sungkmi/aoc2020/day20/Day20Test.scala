package sungkmi.aoc2020.day20

import scala.collection.BitSet

class Day20Test extends munit.FunSuite {

  val tileString1 = """..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###"""

  val tile1 = IndexedSeq(
    BitSet(1,4,6,7),
    BitSet(5,8,9),
    BitSet(1,4,5,9),
    BitSet(0,4,6,7,8,9),
    BitSet(1,2,3,5,6,8,9),
    BitSet(0,1,2,4,8,9),
    BitSet(0,1,4,6,8),
    BitSet(2,7),
    BitSet(1,3,7,8,9),
    BitSet(0,1,2,5,6,7),
  )

  val edges1 = IndexedSeq(
    BitSet(1,4,6,7),
    BitSet(0,3,4,6),
    BitSet(0,1,2,5,6,7),
    BitSet(1,2,3,4,5,8),
  )

  val testInput = """Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###..."""

  test("day20 parseTile") {
    assertEquals(parseTile(tileString1), tile1)
  }

  test("day20 edges") {
    assertEquals(tile1.edges, edges1)
  }

  test("day20 neighborMap") {
    assertEquals(
      neighborMap(groupTiles(parse(input))).filter(_._2.size == 2).size,
      4
    )
  }
}
